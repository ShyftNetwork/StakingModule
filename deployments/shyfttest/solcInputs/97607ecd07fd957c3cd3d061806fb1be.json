{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IPriceFeeder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\n/**\n * @title PriceFeeder test interface\n * @dev WARNING Only for testing purposes.\n */\ninterface IPriceFeeder {\n    function getCurrentPrice() external view returns (uint256);\n    function getMarketAveragePrice() external view returns (uint256);\n}\n"
    },
    "contracts/ShyftStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {IShyftDao} from './interfaces/IShyftDao.sol';\nimport {IPriceFeeder} from './interfaces/IPriceFeeder.sol';\n\n/**\n * @title ShyftStaking Contract\n */\ncontract ShyftStaking is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n  using SafeMath for uint256;\n\n  // Timestamp when current staking period is finishing.\n  uint256 public periodFinish;\n  // The reward rate for current period.\n  uint256 public rewardRate;\n  // The normal amount of rewards to be provided every period.\n  uint256 public rewardsAmount;\n  // The duration of a period.\n  uint256 public rewardsDuration;\n  // The time needed to be able to unstake after calling unbond.\n  uint256 public unbondingPeriod;\n  // The timestamp that the rewards were updated.\n  uint256 public lastUpdateTime;\n  // The reward amount for every Shft that is staked.\n  uint256 public rewardPerShftStored;\n  // The timestamp at which the pre purchasers amounts are released.\n  uint256 public prePurchasersReleaseTimestamp;\n\n  // The user reward per every shft staked already paid.\n  mapping(address => uint256) public userRewardPerShftPaid;\n  // The user rewards already added.\n  mapping(address => uint256) public rewards;\n\n  // The total supply staked or added (prepurchasers) inside the contract.\n  uint256 private _totalSupply;\n  // The balance of an address (prepurchasers don't have any till they stake).\n  mapping(address => uint256) private _balances;\n\n  // The address of the rewardsDistribution contract.\n  address public rewardsDistribution;\n  // The dao contract, that provides the rewards multiplier.\n  IShyftDao public shyftDao;\n  // The priceFeeder contract, that provides the marketAveragePrice and the currentPrice of SHFT.\n  IPriceFeeder public priceFeeder;\n\n  // The lowest voting bound price for SHFT.\n  uint256 public lowestVotingBoundPrice;\n\n  // A struct containing the unbonding details.\n  struct UnbondingDetails {\n    // The account requested the unbonding.\n    address account;\n    // The remaining amount to be unstaked.\n    uint256 remainingAmount;\n    // The timestamp when unstaking is enabled for this unbonding.\n    uint256 unstakeEnabledTimestamp;\n    // The index, in which the unbonding exists into the account's unbonding array.\n    uint256 indexIntoUnbondingArray;\n  }\n\n  // UnbondingId => UnbondingDetails.\n  mapping(uint256 => UnbondingDetails) public unbondingDetailsForId;\n  // Staker => Unbonding ids array.\n  mapping(address => uint256[]) public unbondingIdsPerAddress;\n  // The total amount of unbondings.\n  uint256 public totalUnbondings;\n\n  // A struct containing the prepurchaser details.\n  struct PrePurchaserDetails {\n    // The amount added for the prepurchasers.\n    uint256 amountAdded;\n    // True if prepurchaser has staked, false otherwise (initilized with false).\n    bool staked;\n  }\n\n  // Prepurchaser's address => PrePurchaserDetails.\n  mapping(address => PrePurchaserDetails) public prePurchasersDetails;\n  // The amount remaining to be staked by all prepurchasers.\n  uint256 public totalPrePurchasersAmountToBeStaked;\n\n  // True if prepurchasers mode is on, false otherwise.\n  bool prePurchasersModeOn;\n\n  /**\n   * @notice Initialize the contract.\n   * @param rewardsDistribution_ The address of the rewardsDistribution contract.\n   * @param shyftDao_ The address of the shyftDao contract.\n   * @param priceFeeder_ The address of the priceFeeder contract.\n   * @param prePurchasersReleaseTimestamp_ The timestamp at which the pre purchasers amounts are released\n   * @param rewardsDuration_ The duration of a period.\n   * @param rewardsAmount_ The normal amount provided as reward every period.\n   * @param lowestVotingBoundPrice_ The lowest voting bound price for SHFT.\n   */\n  function initialize(\n    address rewardsDistribution_,\n    address shyftDao_,\n    address priceFeeder_,\n    uint256 prePurchasersReleaseTimestamp_,\n    uint256 rewardsDuration_,\n    uint256 rewardsAmount_,\n    uint256 lowestVotingBoundPrice_\n  ) external initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n\n    rewardsDistribution = rewardsDistribution_;\n    shyftDao = IShyftDao(shyftDao_);\n    priceFeeder = IPriceFeeder(priceFeeder_);\n\n    prePurchasersReleaseTimestamp = prePurchasersReleaseTimestamp_;\n    rewardsDuration = rewardsDuration_;\n    rewardsAmount = rewardsAmount_;\n    lowestVotingBoundPrice = lowestVotingBoundPrice_;\n\n    prePurchasersModeOn = true;\n    unbondingPeriod = 28 days;\n  }\n\n  /* ======================================================= MODIFIERS ====================================================== */\n\n  modifier updateReward(address account) {\n    rewardPerShftStored = rewardPerShft();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (account != address(0)) {\n      rewards[account] = earned(account);\n      userRewardPerShftPaid[account] = rewardPerShftStored;\n    }\n    _;\n  }\n\n  modifier onlyRewardsDistribution() {\n    require(msg.sender == rewardsDistribution,\n      \"Only rewardsDistribution contract\");\n    _;\n  }\n\n  modifier onlyAfterRelease() {\n    require(block.timestamp >= prePurchasersReleaseTimestamp,\n      \"Cannot do this action yet\");\n    _;\n  }\n\n  modifier onlyPrePurchaserModeOn() {\n    require(prePurchasersModeOn, \"Only if prepurchasers mode is ON\");\n    _;\n  }\n\n  /* ======================================================== EVENTS ======================================================== */\n\n  event RewardAdded(uint256 reward);\n  event Staked(address indexed user, uint256 amount);\n  event Unbonded(address indexed user, uint256 amount, uint256 timestamp, uint256 id);\n  event RewardPaid(address indexed user, uint256 reward);\n  event RewardsDurationUpdated(uint256 newDuration);\n  event RewardAmountUpdated(uint256 newRewardAmount);\n  event LowestVotingBoundPriceUpdated(uint256 newLowestVotingBoundPrice);\n  event Unstaked(uint256 indexed unbondingId, uint256 amount);\n  event PrePurchaserAdded(address indexed prePurchaser, uint256 amount);\n  event PrePurchaserStaked(address indexed prePurchaser, uint256 amount);\n  event PrepurchasersModeFinished(uint256 amountOfRewardsReturned);\n\n  /* ================================================== MUTATIVE FUNCTIONS ================================================== */\n\n  /**\n   * @notice Stake\n   * @dev This function is used by users to stake.\n   * @notice Prepurchasers cannot stake till the prepurchasers mode goes off.\n   */\n  function stake() external payable nonReentrant updateReward(msg.sender) {\n    if (prePurchasersDetails[msg.sender].amountAdded > 0) {\n      require(!prePurchasersModeOn,\n        \"Prepurchasers can normally stake only if prepurchasers mode is not ON\"\n      );\n    }\n\n    uint256 amount = msg.value;\n    require(amount > 0, \"Cannot stake 0\");\n\n    _totalSupply = _totalSupply.add(amount);\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n    emit Staked(msg.sender, amount);\n  }\n\n  /**\n   * @notice Stake for prepurchasers\n   * @dev This function is used by prepurchasers so that they can add the amount needed to be eligible\n   * @dev for already farmed rewards.\n   * @notice Prepurchasers can only use this function after their release and only if prepurchasers mode is on.\n   */\n  function stakePrePurchaser() external payable nonReentrant onlyAfterRelease onlyPrePurchaserModeOn {\n    require(!prePurchasersDetails[msg.sender].staked, \"Cannot stake again\");\n    require(prePurchasersDetails[msg.sender].amountAdded > 0,\n      \"Only Prepurchasers can call this function\");\n    require(msg.value == prePurchasersDetails[msg.sender].amountAdded,\n      \"Prepurchasers should stake the whole exact amount\");\n\n    uint256 amount = msg.value;\n\n    prePurchasersDetails[msg.sender].staked = true;\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n    totalPrePurchasersAmountToBeStaked = totalPrePurchasersAmountToBeStaked.sub(amount);\n\n    emit PrePurchaserStaked(msg.sender, amount);\n  }\n\n  /**\n   * @notice Unbond\n   * @dev This function is used by users to unbond part of their stake.\n   * @notice This function can only be called after prepurchasers' release happens.\n   * @param amount The amount to be unbonded.\n   */\n  function unbond(uint256 amount) external nonReentrant onlyAfterRelease updateReward(msg.sender) {\n    _unbond(amount);\n  }\n\n  /**\n   * @notice UnbondAll\n   * @dev This function is used by users to unbond their whole stake.\n   * @notice This function can only be called after prepurchasers' release happens.\n   */\n  function unbondAll() external nonReentrant onlyAfterRelease updateReward(msg.sender) {\n    _unbond(_balances[msg.sender]);\n    _getReward();\n  }\n\n  /**\n   * @notice Unstake\n   * @dev This function is used by users to unstake their unbonded stakes.\n   * @notice This function is associated with an unbonding id generated from the unbond function.\n   * @notice Must have passed at least time equal to unbondingPeriod between unbond and unstake\n   * @notice for users to be able to unstake.\n   * @param unbondingId The unbondingId from which user would like to unstake.\n   * @param amount The amount from the unbonding id, which user would like to unstake.\n   */\n  function unstake(uint256 unbondingId, uint256 amount) external nonReentrant {\n    require(block.timestamp >= unbondingDetailsForId[unbondingId].unstakeEnabledTimestamp,\n      \"Cannot unstake before unbonding period ends\");\n    require(msg.sender == unbondingDetailsForId[unbondingId].account,\n      \"Only owner of unbonding id can unstake\");\n    require(unbondingDetailsForId[unbondingId].remainingAmount >= amount,\n      \"Cannot unstake more than remaining amount in unbonding id\");\n\n    unbondingDetailsForId[unbondingId].remainingAmount =\n      unbondingDetailsForId[unbondingId].remainingAmount.sub(amount);\n\n    if (unbondingDetailsForId[unbondingId].remainingAmount == 0) {\n      uint256 index = unbondingDetailsForId[unbondingId].indexIntoUnbondingArray;\n      uint256 length = unbondingIdsPerAddress[msg.sender].length;\n\n      uint256 unbondingIdToMove = unbondingIdsPerAddress[msg.sender][length.sub(1)];\n      unbondingIdsPerAddress[msg.sender][index] = unbondingIdToMove;\n      unbondingIdsPerAddress[msg.sender].pop();\n\n      // Case that rubbish remains in here, that does not play any role though.\n      unbondingDetailsForId[unbondingIdToMove].indexIntoUnbondingArray = index;\n    }\n\n    emit Unstaked(unbondingId, amount);\n\n    msg.sender.transfer(amount);\n  }\n\n  /**\n   * @notice GetReward\n   * @dev This function is used by users to get their rewards.\n   * @notice This function can only be called after prepurchasers' release happens.\n   */\n  function getReward() external nonReentrant onlyAfterRelease updateReward(msg.sender) {\n    _getReward();\n  }\n\n  /* ================================================= RESTRICTED FUNCTIONS ================================================= */\n\n  /**\n   * @notice NotifyRewardAmount\n   * @dev This function can only be called by rewardsDistribution contract to provide rewards.\n   */\n  function notifyRewardAmount() external payable onlyRewardsDistribution updateReward(address(0)) {\n    require(msg.value == rewardsAmount, \"Whole rewardsAmount should be sent\");\n\n    uint256 marketAveragePrice = priceFeeder.getMarketAveragePrice();\n    uint256 currentPrice = priceFeeder.getCurrentPrice();\n\n    uint256 reward;\n\n    if (marketAveragePrice <= lowestVotingBoundPrice) { // normal rewards\n      reward = rewardsAmount;\n    } else if (marketAveragePrice <= currentPrice) { // reward based on dao multiplie\n      uint256 daoMultiplier = shyftDao.getDaoMultiplier();\n      require(daoMultiplier > 0 && daoMultiplier <= 1 ether, \"Wrong dao multiplier limits\");\n      reward = rewardsAmount.mul(daoMultiplier).div(1 ether);\n    } else { // no rewards\n      reward = 0;\n    }\n\n    if (block.timestamp >= periodFinish) {\n      rewardRate = reward.div(rewardsDuration);\n    } else {\n      uint256 remaining = periodFinish.sub(block.timestamp);\n      uint256 leftover = remaining.mul(rewardRate);\n      rewardRate = reward.add(leftover).div(rewardsDuration);\n    }\n\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp.add(rewardsDuration);\n\n    emit RewardAdded(reward);\n\n    msg.sender.transfer(msg.value.sub(reward));\n  }\n\n  /**\n   * @notice SetRewardsDuration\n   * @dev This function can be called by the owner to change the rewards period.\n   * @notice Can only be called after previous rewards period has finished.\n   * @param rewardsDuration_ The new rewards duration.\n   */\n  function setRewardsDuration(uint256 rewardsDuration_) external onlyOwner {\n    require(\n      block.timestamp > periodFinish,\n      \"Previous rewards period must be complete before changing the duration for the new period\"\n    );\n    rewardsDuration = rewardsDuration_;\n    emit RewardsDurationUpdated(rewardsDuration);\n  }\n\n  /**\n   * @notice SetRewardsAmount\n   * @dev This function can be called by the owner to change the normal rewards amount.\n   * @param rewardsAmount_ The new rewards amount.\n   */\n  function setRewardsAmount(uint256 rewardsAmount_) external onlyOwner {\n    rewardsAmount = rewardsAmount_;\n    emit RewardAmountUpdated(rewardsAmount);\n  }\n\n  /**\n   * @notice SetLowestVotingBoundPrice\n   * @dev This function can be called by the owner to change the lowest voting bound price.\n   * @param lowestVotingBoundPrice_ The new lowest voting bound price.\n   */\n  function setLowestVotingBoundPrice(uint256 lowestVotingBoundPrice_) external onlyOwner {\n    lowestVotingBoundPrice = lowestVotingBoundPrice_;\n    emit LowestVotingBoundPriceUpdated(lowestVotingBoundPrice);\n  }\n\n  /**\n   * @notice setPriceFeeder\n   * @dev This function can be called by the owner to change the priceFeeder contract.\n   * @param priceFeeder_ The new priceFeeder address.\n   */\n  function setPriceFeeder(address priceFeeder_) external onlyOwner {\n    priceFeeder = IPriceFeeder(priceFeeder_);\n  }\n\n  /**\n   * @notice setShyftDao\n   * @dev This function can be called by the owner to change the shyftDao contract.\n   * @param shyftDao_ The new shyftDao address.\n   */\n  function setShyftDao(address shyftDao_) external onlyOwner {\n    shyftDao = IShyftDao(shyftDao_);\n  }\n\n  /**\n   * @notice setRewardsDistribution\n   * @dev This function can be called by the owner to change the rewardsDistribution address.\n   * @param rewardsDistribution_ The new rewardsDistribution address.\n   */\n  function setRewardsDistribution(address rewardsDistribution_) external onlyOwner {\n    rewardsDistribution = rewardsDistribution_;\n  }\n\n  /**\n   * @notice AddPrePurchasers\n   * @dev This function can be called by the owner to add prepurchasers.\n   * @notice Can only be called before any rewards have been provided.\n   * @notice Careful on inputs creation, prepurchasers already added cannot be added again.\n   * @param prePurchasers The array of the prepurchasers' addresses to be added.\n   * @param amounts The array of the amounts to be added for each prepurchaser.\n   */\n  function addPrePurchasers(\n    address[] calldata prePurchasers,\n    uint256[] calldata amounts\n  ) external onlyOwner {\n    require(rewardRate == 0, \"Cannot add prepurchasers after rewards are provided\");\n    require(prePurchasers.length == amounts.length &&\n      prePurchasers.length > 0, \"Wrong input\");\n\n    for (uint256 i = 0; i < prePurchasers.length; i++) {\n      require(amounts[i] > 0, \"Amount to be added must be greater than 0\");\n      require(prePurchasersDetails[prePurchasers[i]].amountAdded == 0,\n        \"Cannot add prepurchaser again\");\n      prePurchasersDetails[prePurchasers[i]].amountAdded = amounts[i];\n\n      _totalSupply = _totalSupply.add(amounts[i]);\n      totalPrePurchasersAmountToBeStaked = totalPrePurchasersAmountToBeStaked.add(amounts[i]);\n\n      emit PrePurchaserAdded(prePurchasers[i], amounts[i]);\n    }\n  }\n\n  /**\n   * @notice FinishPrePurchasersMode\n   * @dev This function can be called by the owner to finish the prepurchasers mode.\n   * @notice After that function is called prepurchasers that have not yet staked are losing\n   * @notice already farmed rewards, which are returned back to the rewardsDistribution contract.\n   */\n  function finishPrePurchasersMode() external onlyOwner onlyAfterRelease onlyPrePurchaserModeOn {\n    prePurchasersModeOn = false;\n\n    uint256 rewardsToBeReturned = totalPrePurchasersAmountToBeStaked.mul(rewardPerShft()).div(1e18);\n    uint256 newTotalSupply = _totalSupply.sub(totalPrePurchasersAmountToBeStaked);\n    rewardRate = rewardRate.mul(newTotalSupply).div(_totalSupply);\n    _totalSupply = newTotalSupply;\n\n    address(uint160(rewardsDistribution)).transfer(rewardsToBeReturned);\n\n    emit PrepurchasersModeFinished(rewardsToBeReturned);\n  }\n\n  /* ======================================================= INTERNALS ====================================================== */\n\n  function _unbond(uint256 amount_) internal {\n    require(amount_ > 0, \"Cannot unbond 0\");\n    require(_balances[msg.sender] >= amount_, \"Cannot unbond more than staked\");\n\n    _totalSupply = _totalSupply.sub(amount_);\n    _balances[msg.sender] = _balances[msg.sender].sub(amount_);\n\n    totalUnbondings = totalUnbondings.add(1);\n\n    unbondingIdsPerAddress[msg.sender].push(totalUnbondings);\n\n    UnbondingDetails memory currentUnbondingDetails;\n    currentUnbondingDetails.account = msg.sender;\n    currentUnbondingDetails.remainingAmount = amount_;\n    currentUnbondingDetails.unstakeEnabledTimestamp = block.timestamp.add(unbondingPeriod);\n    currentUnbondingDetails.indexIntoUnbondingArray = unbondingIdsPerAddress[msg.sender].length.sub(1);\n\n    unbondingDetailsForId[totalUnbondings] = currentUnbondingDetails;\n\n    emit Unbonded(msg.sender, amount_, block.timestamp, totalUnbondings);\n  }\n\n  function _getReward() internal {    \n    uint256 reward = rewards[msg.sender];\n    if (reward > 0) {\n      rewards[msg.sender] = 0;\n      msg.sender.transfer(reward);\n\n      emit RewardPaid(msg.sender, reward);\n    }\n  }\n\n  /* ========================================================= VIEWS ======================================================== */\n\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address account) external view returns (uint256) {\n    return _balances[account];\n  }\n\n  function lastTimeRewardApplicable() public view returns (uint256) {\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n  }\n\n  function rewardPerShft() public view returns (uint256) {\n    if (_totalSupply == 0) {\n      return rewardPerShftStored;\n    }\n    return \n      rewardPerShftStored.add(\n        lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n      );\n  }\n\n  function earned(address account) public view returns (uint256) {\n    return _balances[account].mul(rewardPerShft().sub(userRewardPerShftPaid[account])).div(1e18).add(rewards[account]);\n  }\n\n  function getRewardForDuration() external view returns (uint256) {\n    return rewardRate.mul(rewardsDuration);\n  }\n\n  function getUnbondingIdsLength(address account) external view returns (uint256) {\n    return unbondingIdsPerAddress[account].length;\n  }\n\n  function getUnbondingIds(address account, uint256 offset, uint256 size) external view returns (uint256[] memory, uint256) {\n    uint256 length = size;\n    uint256 unbondingIdsLength = unbondingIdsPerAddress[account].length;\n\n    if (length > unbondingIdsLength - offset) {\n      length = unbondingIdsLength - offset;\n    }\n\n    uint256[] memory unbondingIds = new uint256[](length);\n    for (uint256 i = 0; i < length; i++) {\n      unbondingIds[i] = unbondingIdsPerAddress[account][i + offset];\n    }\n\n    return (unbondingIds, offset + length);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IShyftDao.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\n/**\n * @title ShyftDao test interface\n * @dev WARNING Only for testing purposes.\n */\ninterface IShyftDao {\n    function getDaoMultiplier() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/upgrade/StakingV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport \"../ShyftStaking.sol\";\n\n/**\n * @title StakingV2 contract\n * @dev WARNING Only for testing purposes, we added a couple of new methods and storage variables to check contract upgrade works fine\n */\ncontract StakingV2 is ShyftStaking {\n    uint256 public test1;\n\n    function testFunction() public pure returns (uint256) {\n        return 1;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}